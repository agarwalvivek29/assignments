/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const port = 3000;
  const app = express();
  var todos = [];
  var count = 0;

  fs.readFile('todos.json','utf-8',(err,data)=>{
    todos = JSON.parse(data).todos;
    count = JSON.parse(data).count;
  })
  
  function updateDB(){
    let newData = {
      "count":count,
      "todos":todos
    }
    var filedata = JSON.stringify(newData)
    fs.writeFile('todos.json',filedata,'utf-8',(err)=>{
      if(err){
        console.error("Yo Error");
      }
      else{
        console.log("Done bro!!");
      }
    })
  }

  app.use(bodyParser.json());
  
  app.get('/todos',(req,res)=>{
    res.send(todos);
  });

  app.get('/todos/:id',(req,res)=>{
    const id = req.params.id;
    for(let ele of todos){
      //console.log(ele);
      if(ele.id==id){
        return res.send(ele);
      }
    }
    res.status(404).send("Item does not exist");
  });

  app.post('/todos',(req,res)=>{
    let newTask=req.body;
    count+=1;
    newTask.id=count;
    console.log(newTask);

    todos.push(newTask);
    updateDB();
    res.send({"id":newTask.id});
  });

  app.put('/todos/:id',(req,res)=>{
    let newData = req.body;
    for(let i=0;i<todos.length;i++){
      let ele=todos[i];
      if(ele.id==req.params.id){
        ele.title=newData.title;
        ele.completed = newData.completed;
        updateDB();
        return res.send("ToDos updated");
      }
    }
    res.status(404).send("Item not found");
  });
  
  app.delete('/todos/:id',(req,res)=>{
    for(let i=0;i<todos.length;i++){
      let ele=todos[i];
      if(ele.id==req.params.id){
        todos.pop(i);
        updateDB();
        return res.send("Item Deleted");
      }
    }
    res.status(404).send("Item not found");
  });

  app.use((req, res) => {
    res.status(404).send('404 Not Found');
  });

  app.listen(port, ()=>{
    console.log(`Server is listening on port ${3000}`);
  });

  module.exports = app;